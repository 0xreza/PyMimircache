# coding=utf-8import matplotlibmatplotlib.use("Agg")import matplotlib.pyplot as pltfrom PyMimircache import *import PyMimircache.CMimircache.GeneralProfiler as c_generalProfilerNUM_OF_THREADS = 36csv_init_params = {"label_column": 2, "trace_ID_column": 1, "real_time_column": -1}def plot_partition(dat, alg, cache_size=2000, figname="partition.png"):    reader = CsvReader(dat, init_params=csv_init_params)    # reader = plainReader(dat)    partition_history = c_generalProfiler.get_partition(reader.cReader, alg, cache_size, 2)    plt.plot(partition_history[0])    print(partition_history[0])    # for i, j in enumerate(partition_history[0]):    #     print("{}: {}".format(i, j))    # print(partition_history[1])    plt.xlabel("virtual time")    plt.ylabel("partition")    plt.ylim([0, 1])    plt.savefig(figname)    plt.clf()def synthetic_mixTrace():    import random    with open("syntheticMix.csv", 'w') as ofile:        for i in range(6):            for j in range(200):                if i%2:                    # ofile.write("A, {}, {}\n".format(2000 * i + j, "A" + str(random.randint(1, 2000))))                    ofile.write("A, {}\n".format("A" + str(j)))                else:                    ofile.write("B, {}\n".format("B" + str(j)))                    # ofile.write("B, {}, {}\n".format(2000 * i + j, "B" + str(random.randint(1, 2000))))def test():    c = Cachecow()    c.open("syntheticMix.txt")    c.plotHRCs(["LRU", "Optimal"], cache_size=5)def plotHRC(dat, cache_size, figname="HRC.png"):    c = Cachecow()    c.csv(dat, init_params=csv_init_params)    # c.open(dat)    c.plotHRCs(["LRU", "FIFO", "Optimal"], cache_size=cache_size, bin_size=1, auto_resize=False, num_of_threads=36, figname=figname)def plotHRC2(dat, figname="HRC.png"):    CACHE_SIZE = 320    BIN_SIZE = 1    c = Cachecow()    c.csv(dat, init_params=csv_init_params)    hr1 = c_generalProfiler.get_partition_hit_rate(c.reader.cReader, "LRU", CACHE_SIZE, BIN_SIZE, num_of_threads=NUM_OF_THREADS)    hr2 = LRUProfiler(c.reader, cache_size=CACHE_SIZE).get_hit_rate()    hr3 = cGeneralProfiler(c.reader, cache_name="Optimal",                           cache_size=CACHE_SIZE, bin_size=BIN_SIZE,                           num_of_threads=NUM_OF_THREADS).get_hit_rate()    # for i, j in enumerate(hr1):    #     print("{}: {}".format(i, j))    # print(hr1.shape)    plt.plot(range(0, CACHE_SIZE+1, BIN_SIZE), hr1, label="LRU_with_Optimal_partition")    plt.plot(range(0, CACHE_SIZE+1, BIN_SIZE), hr3, label="Optimal")    plt.plot(hr2[:-2], label="LRU")    plt.ylabel("hit ratio")    plt.xlabel("cache size")    plt.title("hit ratio curve")    plt.legend(loc="best")    plt.savefig(figname)if __name__ == "__main__":    TRACE = "syntheticMix.csv"    # test()    # synthetic_mixTrace()    plot_partition(TRACE, "Optimal", figname="partition_syn_OPT.png", cache_size=20)    plot_partition(TRACE, "LRU", figname="partition_syn_LRU.png", cache_size=20)    plot_partition(TRACE, "FIFO", figname="partition_syn_RR_FIFO.png", cache_size=20)    plotHRC(TRACE, cache_size=500, figname="HRC_noPartition.png")    plotHRC2(TRACE, figname="HRC_syn.png")